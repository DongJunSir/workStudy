/**
 * Created by Administrator on 2017/10/26 0026.
 */
//七、模块的规范
//模块的重要性
//有了模块,我们就可以更方便地使用别人的代码,想要什么功能，就加载什么模块。
//但是这样做有一个前提,那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法就乱套。
//考虑到JavaScript还没有官方规范，这一点很重要。

//目前，通行的JavaScript模块规范共有两种:commonJs和AMD规范。

//八、CommonJS
//在浏览器环境下,没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务端，一定要有模块，
//与操作系统和其他应用程序互动，否则根本没法编程。
//node.js的模块系统就是参照CommonJS规范实现的。在CommonJS中有一个require()用于加载模块
//假定有一个数学模块math.js就可以向下面这样加载
var math = require("math");
//然后就可以调用模块提供的方法
var math = require('math');
math.add(2,3);

//九、浏览器环境
//有了服务器模块之后，自然大家想到客户端模块。最好两者都能兼容，一个模块不用修改，在服务器和浏览器都可以运行
//但是一个重大的局限,使得CommonJS规范不适用于浏览器环境。

//math.add(2,3)在上一节第一行require('math')之后运行,因此必须等math.js加载完成。如果加载时间很长
//整个应用会停在那里等。对于浏览器来说，如果网速过慢，浏览器会处于假死的状态

//因此,浏览器的模块，不能采用"同步加载",只能采用"异步加载"。这就是AMD规范诞生的背景。

//十、AMD
//AMD是Asynchronous Module Definition的缩写,意思就是"异步模块定义"。它采用异步加载模块,模块的加载
//不影响后面语句的执行。所有依赖这个模块的语句,都定义在一个回调函数中，等到加载完成之后这个回调函数才会运行。

require([module],callback);

require(['math'],function(math){
    math.add(2,3);
});

//math.add()与math模块加载是不同步的,浏览器不会发生假死 所以AMD比较适合浏览器环境。
